/*
===============================================================================
                        ESP32 간단 IoT 대시보드 프로젝트
===============================================================================

[프로젝트 개요]
- ESP32를 사용한 웹 기반 IoT 대시보드
- BME280 센서로 온도/습도 측정
- 웹페이지를 통한 LED 제어
- WiFi를 통한 원격 모니터링 및 제어

[필요한 하드웨어]
1. ESP32 개발보드
2. BME280 온습도 센서 (I2C 연결)
3. LED + 저항 (220Ω)
4. 브레드보드 및 점퍼선

[연결 방법]
- BME280: SDA → GPIO21, SCL → GPIO22, VCC → 3.3V, GND → GND
- LED: Anode(+) → GPIO45, Cathode(-) → 저항 → GND

[사용법]
1. WiFi 정보 수정 (ssid, password)
2. 코드 업로드 후 시리얼 모니터에서 IP 주소 확인
3. 브라우저에서 해당 IP 주소로 접속
4. 온습도 확인 및 LED 제어

[작성자] : ESP32 IoT 학습용
[날짜] : 2024
===============================================================================
*/

/* ========== 라이브러리 포함 (Include Libraries) ========== */
#include "WiFi.h"                // ESP32의 WiFi 연결 기능을 사용하기 위한 라이브러리
#include "ESPAsyncWebServer.h"   // 비동기 웹서버 생성 (여러 클라이언트 동시 처리 가능)
#include <Adafruit_BME280.h>     // BME280 온습도 센서 제어 라이브러리
#include <Adafruit_Sensor.h>     // Adafruit 센서의 공통 기능 제공 라이브러리

/* ========== 네트워크 설정 (Network Configuration) ========== */
const char* ssid = "YOUR_WIFI_NAME";        // 연결할 WiFi 네트워크 이름 (SSID)
const char* password = "YOUR_WIFI_PASSWORD"; // WiFi 네트워크 비밀번호

/* ========== 하드웨어 설정 (Hardware Configuration) ========== */
Adafruit_BME280 bme;    // BME280 센서 객체 생성 (I2C 통신으로 온습도 측정)
const int ledPin = 45;  // LED가 연결된 GPIO 핀 번호 (ESP32의 45번 핀)

/* ========== 웹서버 설정 (Web Server Configuration) ========== */
AsyncWebServer server(80);  // HTTP 기본 포트인 80번에서 웹서버 실행

/* ========== 웹페이지 HTML 코드 (Web Page HTML Code) ========== */
// R"rawliteral( )rawliteral" : C++11 원시 문자열 리터럴 문법
// 따옴표나 백슬래시 이스케이프 없이 HTML 코드를 그대로 저장 가능
const char index_html[] = R"rawliteral(
<!DOCTYPE HTML><html>  <!-- HTML5 문서 타입 선언 -->
<head>
  <title>간단 IoT 대시보드</title>  <!-- 브라우저 탭에 표시될 제목 -->
  <!-- 모바일 기기에서 화면 크기에 맞게 표시하도록 설정 -->
  <meta name="viewport" content="width=device-width, initial-scale=1">
  
  <!-- CSS 스타일 정의 (웹페이지 디자인) -->
  <style>
    /* 전체 페이지 스타일 */
    body { font-family: Arial; text-align: center; margin: 50px; }
    
    /* 카드 형태의 박스 스타일 (센서 데이터 표시용) */
    .card { 
      background: #f0f0f0;                    /* 연한 회색 배경 */
      padding: 20px;                          /* 내부 여백 */
      margin: 10px;                           /* 외부 여백 */
      border-radius: 10px;                    /* 모서리 둥글게 */
      box-shadow: 0 2px 5px rgba(0,0,0,0.1);  /* 그림자 효과 */
    }
    
    /* 버튼 스타일 (LED 제어 버튼용) */
    .button {
      background-color: #4CAF50;  /* 초록색 배경 */
      border: none;               /* 테두리 없음 */
      color: white;               /* 흰색 글자 */
      padding: 15px 32px;         /* 내부 여백 (위아래 15px, 좌우 32px) */
      text-decoration: none;      /* 링크 밑줄 제거 */
      display: inline-block;      /* 인라인 블록 요소로 표시 */
      font-size: 16px;            /* 글자 크기 */
      margin: 4px 2px;            /* 외부 여백 */
      border-radius: 5px;         /* 모서리 둥글게 */
    }
    
    h1 { color: #333; }                      /* 제목 색상: 진한 회색 */
    .data { font-size: 24px; color: #0066cc; } /* 센서 데이터 글자: 크고 파란색 */
  </style>
</head>
<body>
  <h1>ESP32 IoT 대시보드</h1>  <!-- 페이지 제목 -->
  
  <!-- 온도 표시 카드 -->
  <div class="card">
    <h2>온도</h2>
    <!-- %TEMPERATURE%는 C++ 코드에서 실제 온도 값으로 교체됩니다 -->
    <div class="data">%TEMPERATURE%°C</div>
  </div>
  
  <!-- 습도 표시 카드 -->
  <div class="card">
    <h2>습도</h2>
    <!-- %HUMIDITY%는 C++ 코드에서 실제 습도 값으로 교체됩니다 -->
    <div class="data">%HUMIDITY%%</div>
  </div>
  
  <!-- LED 제어 카드 -->
  <div class="card">
    <h2>LED 제어</h2>
    <!-- LED 켜기 버튼: /led/on URL로 이동 -->
    <a href="/led/on" class="button">LED 켜기</a>
    <!-- LED 끄기 버튼: /led/off URL로 이동, 빨간색으로 표시 -->
    <a href="/led/off" class="button" style="background-color:#f44336;">LED 끄기</a>
  </div>
  
  <!-- 새로고침 링크: 메인 페이지(/)로 이동하여 최신 센서 데이터 확인 -->
  <p><a href="/">새로고침</a></p>
</body>
</html>)rawliteral";

/* ========== 초기 설정 함수 (Setup Function) ========== */
// 이 함수는 ESP32가 부팅될 때 한 번만 실행됩니다
void setup() {
  // 시리얼 통신 시작 (컴퓨터와 디버깅 메시지 주고받기 위해)
  Serial.begin(115200);  // 통신 속도: 115200 bps
  
  /* ----- LED 핀 초기화 ----- */
  pinMode(ledPin, OUTPUT);     // 45번 핀을 출력 모드로 설정
  digitalWrite(ledPin, LOW);   // LED 초기 상태를 꺼진 상태(LOW)로 설정
  
  /* ----- BME280 센서 초기화 ----- */
  // I2C 주소 0x76으로 BME280 센서와 통신 시도
  if (!bme.begin(0x76)) {
    Serial.println("BME280 센서를 찾을 수 없습니다!"); // 센서 연결 실패 메시지
    while (1);  // 무한 루프로 프로그램 중단 (센서 없이는 실행 불가)
  }
  
  /* ----- WiFi 네트워크 연결 ----- */
  WiFi.begin(ssid, password);        // 설정된 WiFi 네트워크에 연결 시도
  Serial.print("WiFi 연결 중");       // 연결 진행 상태 표시
  
  // WiFi가 연결될 때까지 대기하는 반복문
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);        // 0.5초 대기
    Serial.print("."); // 연결 중임을 나타내는 점(.) 출력
  }
  
  // WiFi 연결 성공 시 실행되는 코드
  Serial.println();                          // 줄바꿈
  Serial.print("WiFi 연결됨! IP 주소: ");     // 성공 메시지
  Serial.println(WiFi.localIP());            // ESP32가 할당받은 IP 주소 출력
  
  /* ----- 웹서버 라우팅 설정 (URL별 처리 함수 정의) ----- */
  
  // 메인 페이지 처리 (사용자가 http://IP주소/ 로 접속할 때)
  server.on("/", HTTP_GET, [](AsyncWebServerRequest *request) {
    String html = index_html;  // HTML 템플릿을 문자열 변수로 복사
    
    /* ----- 실시간 센서 데이터로 플레이스홀더 교체 ----- */
    // %TEMPERATURE%를 실제 온도 값으로 변경 (소수점 1자리까지)
    html.replace("%TEMPERATURE%", String(bme.readTemperature(), 1));
    // %HUMIDITY%를 실제 습도 값으로 변경 (소수점 1자리까지)
    html.replace("%HUMIDITY%", String(bme.readHumidity(), 1));
    
    // 완성된 HTML을 클라이언트(브라우저)에게 전송
    request->send(200, "text/html", html);  // HTTP 200 OK 응답코드와 함께 전송
  });
  
  // LED 켜기 처리 (사용자가 http://IP주소/led/on 으로 접속할 때)
  server.on("/led/on", HTTP_GET, [](AsyncWebServerRequest *request) {
    digitalWrite(ledPin, HIGH);    // LED 핀에 HIGH(3.3V) 신호 출력 → LED 켜짐
    Serial.println("LED 켜짐");     // 시리얼 모니터에 상태 출력
    request->redirect("/");        // 메인 페이지로 자동 이동 (새로고침 효과)
  });
  
  // LED 끄기 처리 (사용자가 http://IP주소/led/off 로 접속할 때)
  server.on("/led/off", HTTP_GET, [](AsyncWebServerRequest *request) {
    digitalWrite(ledPin, LOW);     // LED 핀에 LOW(0V) 신호 출력 → LED 꺼짐
    Serial.println("LED 꺼짐");     // 시리얼 모니터에 상태 출력
    request->redirect("/");       // 메인 페이지로 자동 이동 (새로고침 효과)
  });
  
  /* ----- 웹서버 시작 ----- */
  server.begin();                    // 설정된 라우팅으로 웹서버 실행 시작
  Serial.println("웹서버 시작됨!");   // 서버 시작 완료 메시지
}

/* ========== 메인 루프 함수 (Main Loop Function) ========== */
// 이 함수는 setup() 실행 후 무한 반복됩니다 (프로그램이 계속 실행되는 동안)
void loop() {
  /* ----- 디버깅용 센서 데이터 출력 ----- */
  Serial.print("온도: ");                    // 온도 라벨 출력
  Serial.print(bme.readTemperature());       // BME280에서 현재 온도 읽어와서 출력
  Serial.print("°C, 습도: ");                // 온도 단위와 습도 라벨
  Serial.print(bme.readHumidity());          // BME280에서 현재 습도 읽어와서 출력
  Serial.println("%");                       // 습도 단위와 줄바꿈
  
  /* ----- 대기 시간 ----- */
  delay(5000);  // 5초(5000밀리초) 대기 후 다시 센서 데이터 출력
                // 이렇게 하면 시리얼 모니터에서 5초마다 센서 값을 확인 가능
                // 웹페이지는 새로고침할 때마다 실시간 데이터가 업데이트됨
}
